AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  traffic-guard-webcam-snaps-to-kvs is a lambda function that is accessible via ApiGateway. It receives a video
  stream (jpg images), encodes them with MKV and sends to Kinesis Video Stream (KVS).

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 40
  Api:
    Cors: "'*'"
Parameters:
  ApiGatewayRoleName:
    Description: "Role assumed by ApiGateway to call serverless function."
    Type: String
    Default: "TrafficGuardApiGateway"
  Deployment:
    Description: "Use different endpoints for different environments. Possible values: Prod | Stage"
    Type: String
    Default: 'Stage'
  Fps:
    Description: "Frames per second"
    Type: Number
    Default: 25
  URLDataFormat:
    Description: "Frames are encoded by html canvas into URL data using predefined format."
    Type: String
    Default: 'data:image/jpeg;base64,'
  KVSStreamName:
    Description: "Target Kinesis Video Steam name"
    Type: String
    Default: 'traffic-guard'

Resources:
  ApiGatewayAssumedRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Description: >
      This role is assumed by ApiGateway to call lambda function.
    Properties:
      RoleName: !Join ["-", [!Ref ApiGatewayRoleName, !Ref "AWS::Region"]]
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
        - arn:aws:iam::aws:policy/AmazonKinesisVideoStreamsFullAccess
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      MaxSessionDuration: 3600

  WebcamSnaps2KvsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Description: >
        Lambda function receives a request containing a bunch of JPEG images, then it converts them into h264 frames
        and sends to KVS.
      CodeUri: ./WebcamSnaps2KvsFunction
      Handler: den.tal.traffic.guard.WebcamStreamProcessor::handleRequest
      Runtime: java11
      MemorySize: 512
      PackageType: Zip
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          FPS: !Ref Fps
          URLDataFormat: !Ref URLDataFormat
          KVSStreamName: !Ref KVSStreamName
#      Events:
#        ApiEvent:
#          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
#          Properties:
#            Path: /process-webcam-stream
#            Method: post

  WebcamSnaps2KvsApi:
    Type: AWS::ApiGateway::RestApi
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Description: "RESTful API via API Gateway"
      DisableExecuteApiEndpoint: False
      EndpointConfiguration:
        Types:
          - EDGE
      Name: WebcamSnapshots2KvsApi

  KinesisVideoStreamResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt WebcamSnaps2KvsApi.RootResourceId
      PathPart: streams
      RestApiId: !Ref WebcamSnaps2KvsApi

  MethodPost:
    Type: AWS::ApiGateway::Method
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      ApiKeyRequired: False
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        ConnectionType: INTERNET
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt WebcamSnaps2KvsFunction.Arn
        Credentials: !GetAtt ApiGatewayAssumedRole.Arn
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200
      RequestParameters:
        method.request.path.kvsName: True
      ResourceId: !Ref KinesisVideoStreamResource
      RestApiId: !Ref WebcamSnaps2KvsApi

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
        - MethodPost
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      RestApiId: !Ref WebcamSnaps2KvsApi
      StageName: !Ref Deployment

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  WebcamSnaps2KvsFunction:
    Description: "WebcamSnaps2Kvs Lambda Function ARN"
    Value: !GetAtt WebcamSnaps2KvsFunction.Arn
  ApiGatewayAssumedRole:
    Description: "Role assumed by ApiGateway to call WebcamSnaps2Kvs lambda"
    Value: !Ref ApiGatewayAssumedRole
  ProcessWebcamSnapshotsApi:
    Description: "API Gateway endpoint URL for Prod stage for WebcamSnaps2Kvs function"
    Value: !Sub "https://${WebcamSnaps2KvsApi}.execute-api.${AWS::Region}.amazonaws.com/${Deployment}/streams"