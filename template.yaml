AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  traffic-guard-webcam-snaps-to-kvs is a lambda function that is accessible via ApiGateway. It receives a video
  stream (jpg images), encodes them with MKV and sends to Kinesis Video Stream (KVS).

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 20
  Api:
    Cors: "'*'"
Parameters:
  DeploymentMode:
    Description: "Use different endpoints for different environments. Possible values: Prod | Stage"
    Type: String
    Default: 'Stage'
  Fps:
    Description: "Frames per second"
    Type: Number
    Default: 25

Resources:
  IdPool:
    Type: AWS::Cognito::IdentityPool
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      IdentityPoolName: 'TrafficGuardIdentityPool'
      AllowUnauthenticatedIdentities: true

  RoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      IdentityPoolId: !Ref IdPool
      Roles:
        unauthenticated: !GetAtt TrafficGuardStreamProducerUnauth.Arn

  TrafficGuardStreamProducerUnauth:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Description: Allows unauthenticated web app users to stream into lambda.
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
  #      ManagedPolicyArns:
  #        - arn:aws:iam::aws:policy/AmazonKinesisVideoStreamsFullAccess

  ApiGatewayAssumedRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Description: >
      This role is assumed by ApiGateway to call lambda function.
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
                - iam.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
      MaxSessionDuration: 3600

  WebcamSnaps2KvsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Description: >
        Lambda function receives a request containing a bunch of JPEG images, then it converts them into h264 frames
        and sends to KVS.
      Policies:
        - AmazonKinesisVideoStreamsFullAccess
        - AWSLambdaExecute
      CodeUri: ./WebcamSnaps2KvsFunction
      Handler: den.tal.traffic.guard.WebcamStreamProcessor::handleRequest
      Runtime: java11
      MemorySize: 512
      PackageType: Zip
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          PARAM1: VALUE
      Events:
        ApiEvent:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /process-webcam-stream/{kvs-name}
            Method: post

  WebcamSnaps2KvsApi:
    Type: AWS::ApiGateway::RestApi
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      BinaryMediaTypes:
        - 'image/jpeg'
      Description: "RESTful API via API Gateway"
      DisableExecuteApiEndpoint: False
      EndpointConfiguration:
        Types:
          - EDGE
      Name: WebcamSnapshots2KvsApi

  KinesisVideoStreamResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt WebcamSnaps2KvsApi.RootResourceId
      PathPart: streams
      RestApiId: !Ref WebcamSnaps2KvsApi

#  GatewayResponse:
#    Type: AWS::ApiGateway::GatewayResponse
#    Properties:
#      ResponseParameters:
#        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
#        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type'"
#      ResponseType: MISSING_AUTHENTICATION_TOKEN
#      RestApiId: !Ref RestApi
#      StatusCode: '404

  MethodOptions:
    Type: AWS::ApiGateway::Method
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      ApiKeyRequired: False
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        ConnectionType: INTERNET
        Type: MOCK
        Credentials: !GetAtt ApiGatewayAssumedRole.Arn
        IntegrationHttpMethod: OPTIONS
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: '*'
              method.response.header.Access-Control-Allow-Headers: 'Content-Type'
              method.response.header.Access-Control-Allow-Methods: 'OPTIONS,POST'
        RequestParameters:
          integration.request.path.kvs-name: method.request.path.kvs-name
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: True
            method.response.header.Access-Control-Allow-Headers: True
            method.response.header.Access-Control-Allow-Methods: True

      ResourceId: !Ref KinesisVideoStreamResource
      RestApiId: !Ref WebcamSnaps2KvsApi
#
#  MethodPost:
#    Type: AWS::ApiGateway::Method
#    DeletionPolicy: Delete
#    UpdateReplacePolicy: Delete
#    Properties:
#      ApiKeyRequired: False
#      AuthorizationType: NONE
#      HttpMethod: POST
#      Integration:
#        ConnectionType: INTERNET
#        Type: AWS
#        arn:aws:apigateway:${AWS::Region}:lambda:path//2015-03-31/functions/arn:aws:lambda:${AWS::Region}:account-id:function:lambda-function-name/invocations
#        Uri: arn:aws:apigateway:${AWS::Region}:lambda:path/process-webcam-stream/{kvs-name}
#        Credentials: !GetAtt ApiGatewayAssumedRole.Arn
#        IntegrationHttpMethod: POST
#        IntegrationResponses:
#          - StatusCode: 200
#            ResponseParameters:
#              method.response.header.Access-Control-Allow-Origin: '*'
#              method.response.multivalueheader.Access-Control-Allow-Headers: 'Content-Type'
#              method.response.multivalueheader.Access-Control-Allow-Methods: 'OPTIONS,POST'
#      ResourceId: !GetAtt WebcamSnaps2KvsApi.RootResourceId
#      RestApiId: !Ref WebcamSnaps2KvsApi
#
#  RequestModel:
#    Type: AWS::ApiGateway::Model
#    Properties:
#      ContentType: 'application/json'
#      Description: >
#        Lambda function request containing a bunch of images from Webcam.
#      Name: WebcamImagesBunch
#      RestApiId: !Ref WebcamSnaps2KvsApi
#      Schema:
#        $schema: 'http://json-schema.org/draft-04/schema#'
#        title: RequestModel
#        type: object
#        properties:
#          frames:
#            type: array
#            items:
#              type: string
#          framerate:
#            type: integer
#          timestamps:
#            type: array
#            items:
#              type: integer
#
#Outputs:
#  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
#  # Find out more about other implicit resources you can reference within SAM
#  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
#  WebcamSnaps2KvsFunction:
#    Description: "WebcamSnaps2Kvs Lambda Function ARN"
#    Value: !GetAtt WebcamSnaps2KvsFunction.Arn
#  TrafficGuardStreamProducerUnauth:
#    Description: "Implicit IAM Role created for WebcamSnaps2Kvs function"
#    Value: !GetAtt WebcamSnaps2KvsFunctionRole.Arn
#  TrafficGuardIdentityPoolId:
#    Description: "JS clients are authorized via identity pool. No keys!"
#    Value: !Ref IdPool
#  ProcessWebcamSnapshotsApi:
#    Description: "API Gateway endpoint URL for Prod stage for WebcamSnaps2Kvs function"
#    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${DeploymentMode}/process-webcam-stream/{kvs-name}/"