AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  traffic-guard-webcam-snaps-to-kws

  Sample SAM Template for traffic-guard-webcam-snaps-to-kws

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 20
  Api:
    Cors: "'*'"


Resources:
  IdPool:
    Type: AWS::Cognito::IdentityPool
    DeletionPolicy: Delete
    Properties:
      IdentityPoolName: 'TrafficGuardIdentityPool'
      AllowUnauthenticatedIdentities: true

  RoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdPool
      Roles:
        unauthenticated: !GetAtt TrafficGuardStreamProducerUnauth.Arn

  TrafficGuardStreamProducerUnauth:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    Description: Allows unauthenticated web app users to stream into lambda.
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
          Action: sts:AssumeRoleWithWebIdentity
#      ManagedPolicyArns:
#        - arn:aws:iam::aws:policy/AmazonKinesisVideoStreamsFullAccess

  WebcamSnaps2KwsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DeletionPolicy: Delete
    Properties:
      Policies:
        - AmazonKinesisVideoStreamsFullAccess
        - AWSLambdaExecute
      CodeUri: ./WebcamSnaps2KwsFunction
      Handler: den.tal.traffic.guard.WebcamStreamProcessor::handleRequest
      Runtime: java11
      MemorySize: 512
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          PARAM1: VALUE
      Events:
        ProcessWebcamSnapshots:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /process-webcam-stream/{proxy+}
            Method: post

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  ProcessWebcamSnapshotsApi:
    Description: "API Gateway endpoint URL for Prod stage for WebcamSnaps2Kws function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/process-webcam-stream/{kws-name}/"
  WebcamSnaps2KwsFunction:
    Description: "WebcamSnaps2Kws Lambda Function ARN"
    Value: !GetAtt WebcamSnaps2KwsFunction.Arn
  TrafficGuardStreamProducerUnauth:
    Description: "Implicit IAM Role created for WebcamSnaps2Kws function"
    Value: !GetAtt WebcamSnaps2KwsFunctionRole.Arn
  TrafficGuardIdentityPoolId:
    Description: "JS clients are authorized via identity pool. No keys!"
    Value: !Ref IdPool